/*****************************************************************************
 * This file contains proprietary information of Access-It Software Ltd.
 * Copying or reproduction without prior written approval is prohibited.
 * Copyright (c) 2004-2019 Access-It Software Ltd.
 *
 * Created 12 07 2019
 *****************************************************************************/
package nz.co.ais.web.api;

import nz.co.ais.common.DebugCtrl;
import nz.co.ais.sql.core.IAISsql_Mgr;
import nz.co.ais.web.UserContextBean;
import nz.co.ais.web.api.auth.JSONAPI_Authorize;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

/**
 * APIAuthFilter
 *
 * @author : Brandon
 */
@WebFilter(urlPatterns = {"/api/*"})
public class APIAuthFilter implements Filter
{
	private FilterConfig filterConfig = null;

	@Override
	public void init(FilterConfig filterConfig)
	{
		DebugCtrl.logMsg(DebugCtrl.DIAGNOSTIC, "init " + this.getClass().getSimpleName());
		this.filterConfig = filterConfig;
	}

	@Override
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException
	{
		final HttpServletRequest httpReq = (HttpServletRequest) request;
		final HttpServletResponse httpRes = (HttpServletResponse) response;
		final ServletContext context = request.getServletContext();
		final UserContextBean ucb = UCBSupport.getUCB(httpReq, context);
		if (ucb != null)
		{
			IAISsql_Mgr sqlMgr = null;
			try
			{
				sqlMgr = ucb.getSqlManager();
				final boolean isAuthorised = getIsAuthorised(sqlMgr, httpReq);
				if (isAuthorised)
				{
					// TODO Add any session attributes which can be used in API calls

					DebugCtrl.logMsg("Access granted to API resource. Continuing filter chain.");
					chain.doFilter(request, response);
				}
				else
				{
					DebugCtrl.logMsg("Access was denied to API resource");
					httpRes.sendError(HttpServletResponse.SC_FORBIDDEN);
				}
			}
			finally
			{
				if (sqlMgr != null)
				{
					sqlMgr.releaseToPool();
				}
			}
		}
		else
		{
			// TODO handle situation where UCB
//		DebugCtrl.logMsg(DebugCtrl.ERROR, "Server error filtering API call. This could be because ucb was null.");
//		httpRes.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
		}
	}

	private boolean getIsAuthorised(IAISsql_Mgr sqlMgr, HttpServletRequest httpReq)
	{
		return JSONAPI_Authorize.getIsBasicAuthorized(sqlMgr, httpReq);
	}

	@Override
	public void destroy()
	{
		DebugCtrl.logMsg("Destroying " + this.getClass().getSimpleName());
		this.filterConfig = null;
	}
}

